@App:name("TaxiRides")
@App:description("Description of the plan")

/*This is the input stream*/
@source( type='kafka',
         topic.list='debs',
         partition.no.list='0',
         threading.option='single.thread',
         group.id="group",
         bootstrap.servers='localhost:9092',
         @map(type='csv') )
define stream TaxiRidesProductionStream (
    medallion string,
    hack_license string,
    pickup_datetime string,
    dropoff_datetime string,
    trip_time_in_secs double,
    trip_distance double,
    pickup_longitude double,
    pickup_latitude double,
    dropoff_longitude double,
    dropoff_latitude double,
    payment_type string,
    fare_amount double,
    surcharge double,
    mta_tax double,
    tip_amount double,
    tolls_amount double,
    total_amount double);

/*This stream will have the rides within the established boundary and the locations converted to the grid*/
define stream FilteredOutOfBounds(    
    medallion string,
    hack_license string,
    pickup_datetime string,
    dropoff_datetime string,
    trip_time_in_secs double,
    trip_distance double,
    pickup_grid string,
    dropoff_grid string,
    payment_type string,
    fare_amount double,
    surcharge double,
    mta_tax double,
    tip_amount double,
    tolls_amount double,
    total_amount double);
    


@store(type='rdbms', jdbc.url="jdbc:mysql://172.17.0.2:3306/TaxiRides?useSSL=false", username="pstr-user", password="pstr#2019" , jdbc.driver.name="com.mysql.jdbc.Driver")
define table RidesInGrid(medallion string, pickup_datetime string, dropoff_datetime string, pickup_grid string, dropoff_grid string);

/* Definition of the table containing all the rides within the specified boundaries and converted to the grid*/
@primaryKey('route')
@store(type='rdbms', jdbc.url="jdbc:mysql://172.17.0.2:3306/TaxiRides?useSSL=false", username="pstr-user", password="pstr#2019" , jdbc.driver.name="com.mysql.jdbc.Driver")
define table TenMostFrequent(route string, route_sum long);

@store(type='rdbms', jdbc.url="jdbc:mysql://172.17.0.2:3306/TaxiRides?useSSL=false", username="pstr-user", password="pstr#2019" , jdbc.driver.name="com.mysql.jdbc.Driver")
define table Departures(medallion string, pickup_grid string, pickup_datetime string);

@store(type='rdbms', jdbc.url="jdbc:mysql://172.17.0.2:3306/TaxiRides?useSSL=false", username="pstr-user", password="pstr#2019" , jdbc.driver.name="com.mysql.jdbc.Driver")
define table ProfitableAreas(area string, profit double);

@store(type='rdbms', jdbc.url="jdbc:mysql://172.17.0.2:3306/TaxiRides?useSSL=false", username="pstr-user", password="pstr#2019" , jdbc.driver.name="com.mysql.jdbc.Driver")
define table AverageProfit(pickup_grid string, avg_area_profit double);

@store(type='rdbms', jdbc.url="jdbc:mysql://172.17.0.2:3306/TaxiRides?useSSL=false", username="pstr-user", password="pstr#2019" , jdbc.driver.name="com.mysql.jdbc.Driver")
define table TaxiIdleTime(medallion string, dropoff_time long, pickup_time long, taxi_idle_time long);

@store(type='rdbms', jdbc.url="jdbc:mysql://172.17.0.2:3306/TaxiRides?useSSL=false", username="pstr-user", password="pstr#2019" , jdbc.driver.name="com.mysql.jdbc.Driver")
define table CongestedAreas(grid string, trip_time long, trip_time_2 long, trip_time_3 long);

@store(type='rdbms', jdbc.url="jdbc:mysql://172.17.0.2:3306/TaxiRides?useSSL=false", username="pstr-user", password="pstr#2019" , jdbc.driver.name="com.mysql.jdbc.Driver")
define table TopDrivers(hack_license string, total_tips_day double);



/* Query filtering the out of bounds entries and converting them to the grid*/
from TaxiRidesProductionStream [40.129715978 <= pickup_latitude and pickup_latitude <= 41.477182778 and -74.910592 <= pickup_longitude and pickup_longitude <= -73.114792]
select medallion, 
    hack_license,
    pickup_datetime,
    dropoff_datetime,
    trip_time_in_secs,
    trip_distance,
    str:concat(convert(math:floor((pickup_latitude - 41.477182778) / 1.3474668 * -300), "string"), ".", convert(math:floor((pickup_longitude + 74.910592) / 1.7958 * 300),"string")) as pickup_grid,
    str:concat(convert(math:floor((dropoff_latitude - 41.477182778) / 1.3474668 * -300), "string"), ".", convert(math:floor((dropoff_longitude + 74.910592) / 1.7958 * 300),"string")) as dropoff_grid,
    payment_type,
    fare_amount,
    surcharge,
    mta_tax,
    tip_amount,
    tolls_amount,
    total_amount
insert into FilteredOutOfBounds;


@info(name='all-valid-entries') 
from FilteredOutOfBounds
select medallion, pickup_datetime, dropoff_datetime, pickup_grid, dropoff_grid
insert into RidesInGrid;



@info(name='Q1') 
from FilteredOutOfBounds#window.timeBatch(30 sec) --this should be minutes, but seconds for tests
select str:concat("From: ", pickup_grid," To: ", dropoff_grid) as route, count(*) as route_sum
group by pickup_grid, dropoff_grid
order by route_sum desc
limit 10
update or insert into TenMostFrequent
on TenMostFrequent.route == route;



@info(name='Q2') 

--stream de profits
from FilteredOutOfBounds#window.time(15 sec) --this should be minutes, but seconds for tests
select pickup_grid, avg(fare_amount + tip_amount) as avg_area_profit
group by pickup_grid
update or insert into AverageProfit
on AverageProfit.pickup_grid == pickup_grid;

--stream de chegadas
from FilteredOutOfBounds#window.time(15 sec) --this should be minutes, but seconds for tests
select medallion, dropoff_grid, dropoff_datetime
group by dropoff_grid
insert into TaxisOnGrid;

--stream/tabela de partidas
from FilteredOutOfBounds#window.time(15 sec) --this should be minutes, but seconds for tests
select medallion, pickup_grid , pickup_datetime
group by pickup_grid
insert into Departures;

--retirar da stream de chegadas as partidas
from TaxisOnGrid
delete Departures
on medallion == Departures.medallion and dropoff_grid == Departures.pickup_grid;

--contar os taxis que estao em espera
from TaxisOnGrid
select medallion, dropoff_grid, count(medallion) as awaiting_taxis
insert into AwaitingTaxisOnGrid;

--juntar as streams e calcular o profit com base na quantidade de taxis a' espera e no profit medio por viagem na grid
from AverageProfit#window.time(15 sec) join AwaitingTaxisOnGrid#window.time(15 sec)
on AverageProfit.pickup_grid == AwaitingTaxisOnGrid.dropoff_grid
select AverageProfit.pickup_grid as area, AverageProfit.avg_area_profit/AwaitingTaxisOnGrid.awaiting_taxis as profit
update or insert into ProfitableAreas
on ProfitableAreas.area == area;




@info(name='Q3')
-- produzir stream com os tempos em millisegundos
from FilteredOutOfBounds
select medallion, time:timestampInMilliseconds(pickup_datetime,'yyyy-MM-dd HH:mm:ss') as pickup_millis, time:timestampInMilliseconds(dropoff_datetime,'yyyy-MM-dd HH:mm:ss') as dropoff_millis, pickup_grid
insert into FilteredTime;

-- procurar todos os registos de taxis que fizeram pickup apos um dropoff
from every ft1 = FilteredTime -> ft2 = FilteredTime[ft1.medallion == ft2.medallion and (ft2.pickup_millis - ft1.dropoff_millis) > 0]
select ft1.medallion as medallion, ft1.dropoff_millis as dropoff_time, ft2.pickup_millis as pickup_time, (ft2.pickup_millis - ft1.dropoff_millis) as taxi_idle_time --calcular o tempo idle entre registos
having taxi_idle_time > (10 * 1000) -- so' e' registado na tabela caso o tempo ultrapasse o estipulado (10seg aqui)
insert into TaxiIdleTime;


@info(name='Q4')
-- seleccionar streams cujos tempos crescam uns a seguir aos outros e devolver a grid
from every ft1 = FilteredTime, 
ft2 = FilteredTime[(ft2.dropoff_millis - ft2.pickup_millis) > (ft1.dropoff_millis - ft1.pickup_millis)], 
ft3 = FilteredTime[(ft3.dropoff_millis - ft3.pickup_millis) > (ft2.dropoff_millis - ft2.pickup_millis)],
ft4 = FilteredTime[(ft4.dropoff_millis - ft4.pickup_millis) > (ft3.dropoff_millis - ft3.pickup_millis)],
ft5 = FilteredTime[(ft5.dropoff_millis - ft5.pickup_millis) > (ft4.dropoff_millis - ft4.pickup_millis)]+
select ft2.pickup_grid as grid, (ft1.dropoff_millis - ft1.pickup_millis) as trip_time, (ft2.dropoff_millis - ft2.pickup_millis) as trip_time_2, (ft3.dropoff_millis - ft3.pickup_millis) as trip_time_3
insert into CongestedAreas;


@info(name='Q5')
from FilteredOutOfBounds#window.timeBatch(5 sec)
select hack_license, sum(tip_amount) as total_tips_day
group by hack_license
order by total_tips_day desc
limit 1
update or insert into TopDrivers
on TopDrivers.hack_license == hack_license;

from FilteredOutOfBounds#window.timeBatch(4 sec)
delete TopDrivers on TopDrivers.hack_license;





















